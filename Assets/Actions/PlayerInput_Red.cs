//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Actions/PlayerInput_Red.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput_Red: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput_Red()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput_Red"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""c3f6f308-fb29-40ce-a40a-2ca674f8fd4a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f0383346-72fb-47b7-b56b-957c0cc116f7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""965d73d4-b796-40da-a805-4e99c42fb59e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""782cb4ff-b7ab-4eda-97e3-443a86d1bfbc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f82e0c87-cb07-47d6-9c08-741822528555"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""691be9ed-ccc3-4003-88da-035131c1a1c6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""96ed8865-67b7-4cb0-bda6-c4b9c1ab8000"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlaceBomb"",
            ""id"": ""35f42d07-16c7-47f4-9f1d-21fbd7dd0171"",
            ""actions"": [
                {
                    ""name"": ""PlaceBomb"",
                    ""type"": ""Button"",
                    ""id"": ""f2d1870f-7af6-4443-b5d9-118afe7b1fcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b7a4169-14e1-4980-8a12-5035b7281fae"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceBomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // PlaceBomb
        m_PlaceBomb = asset.FindActionMap("PlaceBomb", throwIfNotFound: true);
        m_PlaceBomb_PlaceBomb = m_PlaceBomb.FindAction("PlaceBomb", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @PlayerInput_Red m_Wrapper;
        public MovementActions(@PlayerInput_Red wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // PlaceBomb
    private readonly InputActionMap m_PlaceBomb;
    private List<IPlaceBombActions> m_PlaceBombActionsCallbackInterfaces = new List<IPlaceBombActions>();
    private readonly InputAction m_PlaceBomb_PlaceBomb;
    public struct PlaceBombActions
    {
        private @PlayerInput_Red m_Wrapper;
        public PlaceBombActions(@PlayerInput_Red wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceBomb => m_Wrapper.m_PlaceBomb_PlaceBomb;
        public InputActionMap Get() { return m_Wrapper.m_PlaceBomb; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaceBombActions set) { return set.Get(); }
        public void AddCallbacks(IPlaceBombActions instance)
        {
            if (instance == null || m_Wrapper.m_PlaceBombActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlaceBombActionsCallbackInterfaces.Add(instance);
            @PlaceBomb.started += instance.OnPlaceBomb;
            @PlaceBomb.performed += instance.OnPlaceBomb;
            @PlaceBomb.canceled += instance.OnPlaceBomb;
        }

        private void UnregisterCallbacks(IPlaceBombActions instance)
        {
            @PlaceBomb.started -= instance.OnPlaceBomb;
            @PlaceBomb.performed -= instance.OnPlaceBomb;
            @PlaceBomb.canceled -= instance.OnPlaceBomb;
        }

        public void RemoveCallbacks(IPlaceBombActions instance)
        {
            if (m_Wrapper.m_PlaceBombActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlaceBombActions instance)
        {
            foreach (var item in m_Wrapper.m_PlaceBombActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlaceBombActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlaceBombActions @PlaceBomb => new PlaceBombActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPlaceBombActions
    {
        void OnPlaceBomb(InputAction.CallbackContext context);
    }
}
